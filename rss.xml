<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>OO能量三明治 Blog</title>
        <link>https://your-docusaurus-test-site.com/blog.powersandwich/</link>
        <description>OO能量三明治 Blog</description>
        <lastBuildDate>Thu, 26 Aug 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hant</language>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://your-docusaurus-test-site.com/blog.powersandwich/welcome</link>
            <guid>welcome</guid>
            <pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></description>
            <content:encoded><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/blog.powersandwich/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p><p>The blog supports tags as well!</p><p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content:encoded>
            <category>facebook</category>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[MDX Blog Post]]></title>
            <link>https://your-docusaurus-test-site.com/blog.powersandwich/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></description>
            <content:encoded><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_S0QG"><p>Use the power of React to create interactive blog posts.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">alert</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'button clicked!'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="複製代碼至剪貼簿" title="複製" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><button>Click me!</button></div></div>]]></content:encoded>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[React 設計模式 - 複合元件]]></title>
            <link>https://your-docusaurus-test-site.com/blog.powersandwich/react-design-pattern.md</link>
            <guid>react-design-pattern.md</guid>
            <pubDate>Thu, 29 Jul 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Heading Image]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" alt="Heading Image" src="/blog.powersandwich/assets/images/react-design-pattern-pink-cloud-e140d20c2b2ba7e1ae4630428e933a68.png" width="800" height="697" class="img_ev3q"></p><p>一般來說，在進行正式的專案開發，製作可以重複被使用的元件時，常常也必須考慮到元件的彈性、與可維護性。因為我們不知道在未來，這個元件會因為產品的需求而產生怎麼樣的調整，所以最低程度地保持元件的可擴充性就可以讓開發者在這個時候比較輕鬆的以最小限度的影響來達成想要的修改。</p><p><strong>複合元件( Compound Component )</strong>就是一種可以同時提高可維護性跟彈性的元件設計方法，或稱為設計模式（ Design Patern ) 。設計模式一詞源自更早期的軟體界發展歷史，這個詞可以用來代稱那些應付經常出現問題的解決辦法。亦即設計模式是經年累月透過所有軟體界的開發者不斷地遇到相同或類似問題之後，慢慢整理出來的方法。有一些設計模式是所有語言都可以通用的，例如你可能會聽過的「 工廠模式 」、「 觀察者模式」。而有一些模式是針對特定情境的問題所設計的，我們今天要談的複合元件就是前端元件開發的設計模式之一。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="需要的先備知識">需要的先備知識<a class="hash-link" href="#需要的先備知識" title="標題的直接連結">​</a></h3><p>這篇文章主要會講解如何設計一個複合元件，在繼續往下閱讀之前，你可能要確保自己了解 React children 與 context 的相關概念，才能夠比較輕鬆的閱讀這篇文章所提及的內容，在這邊附上幾篇可以參考的資源：</p><p>React Children — 操作元素的 React 原生 API ：
– <a href="https://codeburst.io/a-complete-guide-to-props-children-in-react-c315fab74e7c" target="_blank" rel="noopener noreferrer">A Complete Guide To props.children In React | codeburst</a></p><p>– <a href="https://reactjs.org/docs/react-api.html" target="_blank" rel="noopener noreferrer">官方文件 — React Top-Level API</a></p><p>React 裡面 Context 的概念：
– <a href="https://reactjs.org/docs/context.html" target="_blank" rel="noopener noreferrer">官方文件 — Context</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="複合元件是什麼">複合元件是什麼<a class="hash-link" href="#複合元件是什麼" title="標題的直接連結">​</a></h3><p>複合元件，或稱合成元件 ( Compound Component ）可以從詞面上看出它大致的意思，就是指數個聚集在一起，並有某些相互關係的元件。透過複合元件，可以讓兩個或兩個以上相關聯的元件用一些不明顯的方式來共用狀態，這是什麼意思，而複合元件到底又解決了什麼樣的問題呢？</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="元件常見的多層結構問題">元件常見的多層結構問題<a class="hash-link" href="#元件常見的多層結構問題" title="標題的直接連結">​</a></h3><p>舉我們常見的下拉選單為例，如果我們現在想要製作自己的選單元件，最直觀的製作方法會是直接創造一個元件，然後把所有相關的資料傳入：</p><p><img loading="lazy" alt="example1" src="/blog.powersandwich/assets/images/react-design-pattern-example1-e34661024f470999f05b3645835a9129.png" width="800" height="540" class="img_ev3q"></p><p>上面的程式碼範例只是一個示意，所以並沒有考慮到 CSS 的樣式，這邊會以狀態傳遞的方式為重點。所以以這個下拉選單的例子來說，我們會把整個選單的名字跟對應的數值，直接傳入這個 <code>&lt;Select/&gt;</code> 元件裡面。</p><p><img loading="lazy" alt="example2" src="/blog.powersandwich/assets/images/react-design-pattern-example2-4916e0151915393b386072e929c76227.png" width="800" height="261" class="img_ev3q"></p><p>但是這麼一來除了沒辦法直接存取到 <code>&lt;Option/&gt;</code> 元件之外，你也可以發現這份相關的選單資料其實是從最上層傳入 <code>&lt;Select/&gt;</code> 元件之後，再次被傳入 <code>&lt;Option/&gt;</code>，<code>&lt;Option&gt;</code>這個元件才有辦法拿到需要用來顯示的選項內容與對應數值。</p><p>一般我們不會樂見這種資料被層層傳遞的使用方式，你可能覺得兩層可能還好，不會太難看出它們的關係，但在實際開發時總是無法永遠確保不會有需要第三層的情況出現，因此雖然難免還是有些不得已必須這麼使用的情況，大多時候對開發者來說這種情況當然是越少越好。你可以想像使用這個用法製作的元件，在當所必須傳入的屬性隨著時間和需求的改變而變得太多時，它會變得越來越難看清楚每個屬性所對應的內容，和與之相關的流程邏輯。</p><p>對上面的 <code>&lt;Select/&gt;</code> 元件來說，也許一個比較好的設計方式最好還是能夠跟原生的 select 與 option 標籤具有同樣的使用方式：</p><p><img loading="lazy" alt="example3" src="/blog.powersandwich/assets/images/react-design-pattern-example3-654a549ffaa07721cce9e0920600dee6.png" width="800" height="162" class="img_ev3q"></p><p>當我們把 <code>&lt;Select/&gt;</code> 元件用某種方式拆分成兩個個別獨立，且相關連的元件之後，就能夠享有一個好處是能夠把元件的樣式內容分開來管理，也就是說我們在設計元件時不需要把所有的程式碼塞在一起。而除了讓內容分離之外，使用複合元件的另外一個很大的好處是能夠讓狀態在這兩個相關連的元件之間共享，這麼一來也可以減少把狀態「傳到上層再傳到下層」的情況發生。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="複合元件的好處">複合元件的好處<a class="hash-link" href="#複合元件的好處" title="標題的直接連結">​</a></h3><p>綜上所述，由於複合元件原本就是為了讓元件之間的相依，並提高使用彈性的方法。所以他所帶來的好處也不難理解：</p><p>讓開發者能夠更容易且隨心所欲控制元件，例如：元件的排列順序。
讓相關元件扁平化，可以使用在同一層而不用全部包在一個地方。
元件內容分離，讓元件更容易管理，就像我們即將要做的：把上面原本的 <code>&lt;Select/&gt;</code> ，拆出 <code>&lt;Option/&gt;</code>，分離成兩個元件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="以-select-為例子來設計複合元件">以 <code>&lt;Select/&gt;</code> 為例子來設計複合元件<a class="hash-link" href="#以-select-為例子來設計複合元件" title="標題的直接連結">​</a></h3><p>下拉選單是前端一個很常見的需求，尤其我們因為樣式的關係，無法使用原生的 Html 元素，所以常常需要客製化的製作。這邊我們就來看看怎麼利用 React 來設計一個跟前端原生的 <code>&lt;select&gt;</code> 元素使用方式較為相近的元件吧！在這個例子裡面，我會以 Class Component 為基礎來進行設計。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="元件的條件要求">元件的條件要求：<a class="hash-link" href="#元件的條件要求" title="標題的直接連結">​</a></h3><p><code>&lt;Select&gt;</code> 與 <code>&lt;Option&gt;</code> 兩個元件必須要能夠分開使用而不是全部放在同一個元件中，像是這樣：</p><p><img loading="lazy" alt="example4" src="/blog.powersandwich/assets/images/react-design-pattern-example4-847e282cd638afcf0b32dbbf49f3013b.png" width="800" height="335" class="img_ev3q"></p><p><code>&lt;Select/&gt;</code> 必須能夠根據其子元素的所有 <code>&lt;Option/&gt;</code>元件內容以及排列順序來顯示下拉清單
元件的製作結果如下：</p><p><img loading="lazy" alt="result1" src="/blog.powersandwich/assets/images/react-design-pattern-result1-67a5754c56c9fad719e61d8353138f27.gif" width="712" height="444" class="img_ev3q"></p><p>先思考元件結構
通常複合元件中，會有一個作為父層元件的主元件，而由其他的元件作為子元件。而在 <code>&lt;Select/&gt;</code> 與 <code>&lt;Option/&gt;</code>的例子中則比較單純，只有父層的 <code>&lt;Select/&gt;</code> 與子層的 <code>&lt;Option/&gt;</code>。以這個架構為前提之下，我們可以繼續往下想想另外幾個問題，那就是：</p><p>作為父層元件的 <code>&lt;Select/&gt;</code> 是怎麼知道在它下層的 <code>&lt;Option/&gt;</code> 的內容的？
<code>&lt;Select/&gt;</code> 又是怎麼比對出當下使用者所選到的選項的？
只要能夠解答這兩個問題，我們基本上就掌握了實作這個 <code>&lt;Select/&gt;</code> 複合元件的關鍵。</p><p>首先，第一個問題的思考方向是一個很常見的 children 屬性，我們只要透過這個屬性就能夠取得「被放入」元件的內容，也就是所有的 <code>&lt;Option/&gt;</code> 元件。而關於 <code>&lt;Select/&gt;</code> 是怎麼知道目前所選的數值的？可想而知的是在 <code>&lt;Select/&gt;</code> 內一定會有一個狀態負責儲存目前被選中的值。</p><p>另外我們再每個 <code>&lt;Option/&gt;</code> 被選中時也必須進行更新這個被選中數值的動作，所以我們也需要在 Option 元件上面掛上對應的 onClick 事件，這麼一來當 <code>&lt;Option&gt;</code> 被點擊時，<code>&lt;Select/&gt;</code> 才有辦法知道被選中的 <code>&lt;Option/&gt;</code> 的數值是哪一個。關於這一點我們可以透過 React 的相關 API ： Children.map 以及 cloneElement 來達成。</p><p>Children.map 負責巡訪每個 <code>&lt;Option/&gt;</code> 子元件 ， cloneElement 則複製一個新的 Option 並讓我們可以在這個時候再次傳入額外的屬性。</p><p><img loading="lazy" alt="example5" src="/blog.powersandwich/assets/images/react-design-pattern-example5-3f28917f9fa6cd2c585ccc255856c28c.png" width="800" height="310" class="img_ev3q"></p><p>藉由上述的程式碼片段可以看出我把個別的子元件內容傳給了 onClick 事件，接下來在事件裡面只要知道要儲存什麼數值藉以比對選中的選項，並拿到元件上對應的屬性值，就能夠透過這個數值進行比對。</p><p><img loading="lazy" alt="example6" src="/blog.powersandwich/assets/images/react-design-pattern-example6-a841f46a1ad3083036802d037744289e.png" width="800" height="631" class="img_ev3q"></p><p>在點擊事件內雖然我做了許多件事情，不過可以看到我從 child 的 props （<strong>也就是 <code>&lt;Option/&gt; </code>上的屬性內容</strong>）取出兩個屬性值，分別為 value 以及 optionKey，其中 optionKey 是每個 <code>&lt;Option/&gt;</code>上都會有，用來區別選項且應該要不重複的值，之後我們就可以拿這個值來決定目前所選中的選項是哪一個。</p><p>接下來的流程就很單純，既然我們可以拿到 <code>&lt;Option/&gt;</code> 上的屬性，我們就能夠拿出來跟儲存在 <code>&lt;Select/&gt;</code> 裡面，代表被選中的 <code>&lt;Option/&gt;</code> 的 selectedOptionKey 這個狀態做比對，如下：</p><p><img loading="lazy" alt="example7" src="/blog.powersandwich/assets/images/react-design-pattern-example7-791aeb44acaca490882017aec0a9487f.png" width="800" height="360" class="img_ev3q"></p><p>我們直接利用 isSelected 以布林值的形式傳給下層的 <code>&lt;Option/&gt;</code>，這麼一來 <code>&lt;Option/&gt;</code> 就能夠透過這個數值決定要顯示什麼樣的內容，或是樣式，我們來看看 <code>&lt;Option/&gt;</code> 的內容。</p><p><img loading="lazy" alt="example8" src="/blog.powersandwich/assets/images/react-design-pattern-example8-0dfd789423fabc2e38bc8e4b1900e230.png" width="800" height="360" class="img_ev3q"></p><p>由於這個例子中 <code>&lt;Option/&gt;</code> 需要顯示的東西和需要判斷的邏輯比較單純，所以元件內容也比較單純，但可以看到我們拿到從 <code>&lt;Select/&gt;</code> 元件裡面傳入的兩個屬性來做一些顯示和判斷，這兩個屬性都不是在使用元件時傳入的，而是從 <code>&lt;Select/&gt;</code> 元件來，所以如果不了解原理的話，單看 <code>&lt;Option/&gt;</code> 這個元件根本就沒辦法直接看出來處。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="利用-class-component-靜態屬性">利用 Class Component 靜態屬性<a class="hash-link" href="#利用-class-component-靜態屬性" title="標題的直接連結">​</a></h3><p>通常複合元件在設計時會把複合元件中的子元件掛在父元件上，而因為在本篇文章所舉的例子裡面，剛好用到的是 Class Component ，所以可以利用 Class 中靜態屬性的概念，讓兩個看似分離的元件，更明確的產生關聯，所以我們在 <code>&lt;Select/&gt;</code>元件內會多做一件事情：</p><p><img loading="lazy" alt="example9" src="/blog.powersandwich/assets/images/react-design-pattern-example9-6d4175ae3084a055dd988cef3c90d20b.png" width="800" height="112" class="img_ev3q"></p><p>這麼一來開發者就可以用 <code>&lt;Select.Option&gt;</code> 來表示 <code>&lt;Option/&gt;</code> 元件，也可以讓使用的開發者馬上理解兩者是有關聯的，而這也是你在各大React UI 元件框架裡面常常會看到的用法。你可能會問：為什麼可以在標籤內存取 Select 底下的屬性 Option ?</p><p>這就要回歸到語法的本質了，要了解這件事你必須先了解一件事就是，<strong>這邊所使用的 &lt;..&gt; 角括號並不是原生的 Html 標籤，而是所謂用來簡化 React 寫法的 JSX 語法</strong>，它所代替的程式碼片段其實是最早 React 內的 React.createElement 方法，參考下面的例子：</p><p><img loading="lazy" alt="example10" src="/blog.powersandwich/assets/images/react-design-pattern-example10-1587f3b1911122403d46f149e62cb582.png" width="800" height="211" class="img_ev3q"></p><p>以上面這個元件為例，下面兩種用法所產生的結果都是一樣的：</p><p><img loading="lazy" alt="example11" src="/blog.powersandwich/assets/images/react-design-pattern-example11-50fcd108a73519dded72786c30124c92.png" width="800" height="137" class="img_ev3q"></p><p>JSX 這種看起來像是 Html 標籤的用法其實就是簡化的 React 寫法，既然原本 React 就是透過把 JavaScript 的元件類別傳入 createElement 這個方法中，在這個前提之下<strong>它所接收的類別當然與一般 JavaScript 的類別並無二致囉</strong>。這個用法對不了解的人看起來可能會有點眼花撩亂，但其實其中的原理就是這麼單純而已。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="善用-context-api">善用 Context API<a class="hash-link" href="#善用-context-api" title="標題的直接連結">​</a></h3><p>雖然在這個例子裡面我們沒有使用到，不過若是想要設計的複合元件結構比較複雜，有多層元件結構的話，可以利用 React 提供的 Context API 來進行跨多層元件的數值內容傳遞。</p><p><img loading="lazy" alt="example12" src="/blog.powersandwich/assets/images/react-design-pattern-example12-c71481e254ed58f287450a8e786c4f86.png" width="800" height="162" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="最終完成的結果">最終完成的結果<a class="hash-link" href="#最終完成的結果" title="標題的直接連結">​</a></h3><p>在上面的內容之中我只解說幾個最關鍵的部分，至於沒有講到的其他細節，就請讀者自己思考看看囉，在這邊附上完整的程式碼範例。</p><iframe src="https://codesandbox.io/embed/compound-compoennt-selectoption-u1x4w?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="Compound Compoennt - Select/Option" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 class="anchor anchorWithStickyNavbar_LWe7" id="動手試試看">動手試試看<a class="hash-link" href="#動手試試看" title="標題的直接連結">​</a></h3><p>本篇文章的是以 Class Component 為例子來進行設計這個複合元件，不過在撰寫這篇文章的此刻，Functional Component 是實際開發時比較主流的元件類型，<strong>其實利用 Functional Component 照理說也能夠設計出使用方式與這個例子完全一樣的複合元件</strong>，讀者們在了解複合元件的概念後，也可以自己嘗試使用 Functional Component 來實做看看自己的複合元件，希望這篇文章能夠幫助到你。那麼，就先說到這囉！</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="參考資源">參考資源<a class="hash-link" href="#參考資源" title="標題的直接連結">​</a></h3><ul><li><p><a href="https://codeburst.io/a-complete-guide-to-props-children-in-react-c315fab74e7c" target="_blank" rel="noopener noreferrer">A Complete Guide To props.children In React | codeburst</a></p></li><li><p><a href="https://blog.martindidiego.com/compound-components-typescript/" target="_blank" rel="noopener noreferrer">Compound React Components with Hooks + TypeScript | Martin’s Blog (martindidiego.com)</a></p></li><li><p><a href="https://mparavano.medium.com/find-filter-react-children-by-type-html-elements-11a0e7bd08bf" target="_blank" rel="noopener noreferrer">Find and Filter React Children By Type (HTML Elements) | by Michael Paravano | Medium</a></p></li></ul>]]></content:encoded>
            <category>frontend</category>
            <category>javascript</category>
        </item>
        <item>
            <title><![CDATA[Long Blog Post]]></title>
            <link>https://your-docusaurus-test-site.com/blog.powersandwich/long-blog-post</link>
            <guid>long-blog-post</guid>
            <pubDate>Wed, 29 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the summary of a very long blog post,]]></description>
            <content:encoded><![CDATA[<p>This is the summary of a very long blog post,</p><p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
            <category>hello</category>
            <category>docusaurus</category>
        </item>
        <item>
            <title><![CDATA[First Blog Post]]></title>
            <link>https://your-docusaurus-test-site.com/blog.powersandwich/first-blog-post</link>
            <guid>first-blog-post</guid>
            <pubDate>Tue, 28 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[A]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a">A<a class="hash-link" href="#a" title="標題的直接連結">​</a></h2><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="b">B<a class="hash-link" href="#b" title="標題的直接連結">​</a></h2><ul><li>asdasd</li><li>-asdasd</li><li>asd-</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="c">c<a class="hash-link" href="#c" title="標題的直接連結">​</a></h3>]]></content:encoded>
            <category>hola</category>
            <category>docusaurus</category>
        </item>
    </channel>
</rss>