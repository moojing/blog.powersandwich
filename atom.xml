<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.powersandwich.com.tw/</id>
    <title>前端實力三明治 Blog</title>
    <updated>2021-08-14T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://blog.powersandwich.com.tw/"/>
    <subtitle>前端實力三明治 Blog</subtitle>
    <icon>http://blog.powersandwich.com.tw/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[作自己的腦內偵探 —— 利用 PDCA 的概念，見證每天進步 1% 的自己！]]></title>
        <id>pdca-method</id>
        <link href="http://blog.powersandwich.com.tw/pdca-method"/>
        <updated>2021-08-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[嗨，我是 Mujing ，今天要講的跟技術比較沒有直接關係，我想要跟大家分享一個平常工作時可以逐步優化自己工作流程的方法，這個方法叫做 PDCA 筆記，最近剛好在研究。試著在工作時用過了幾次之後，我發現這套方法能夠讓自己看見自己執行任務的現況，再想辦法針對問題逐個改善。針對想要優化自己工作的流程卻不知道哪邊可以做得更好，或是怎麼樣做得更好的讀者，這邊推薦這個方法給你。]]></summary>
        <content type="html"><![CDATA[<p>嗨，我是 Mujing ，今天要講的跟技術比較沒有直接關係，我想要跟大家分享一個平常工作時可以逐步優化自己工作流程的方法，這個方法叫做 PDCA 筆記，最近剛好在研究。試著在工作時用過了幾次之後，我發現這套方法能夠讓自己看見自己執行任務的現況，再想辦法針對問題逐個改善。針對想要優化自己工作的流程卻不知道哪邊可以做得更好，或是怎麼樣做得更好的讀者，這邊推薦這個方法給你。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="outline">Outline<a class="hash-link" href="#outline" title="標題的直接連結">​</a></h3><ul><li>PDCA 是一種思考的框架</li><li>P、D、C、A 怎麼做？</li><li>使用橫向 A4 紙</li><li>假說的重要性</li><li>建立一個長期目標</li><li>寫在最後</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pdca-是一種思考的框架">PDCA 是一種思考的框架<a class="hash-link" href="#pdca-是一種思考的框架" title="標題的直接連結">​</a></h3><p>為什麼我們需要思考的框架？人的思考通常不會是線性的，你可能一下想到要處理昨天同事拜託你處理的文件，一下又想到下午要開一個重要的會議，接著想到早上忘了買杯咖啡……。人類這樣非線性的思考絕對不是缺陷，事實上，這也是人類之所以能夠這麼有創意的原因。不過如果我們只依照線性的流程來完成特定的任務，那我們可能就跟機器沒什麼兩樣了，而且處理速度還落差了幾百幾萬倍。</p><p>人類需要偶爾跳 Tone 的靈活思考，有時候忽然的靈光一現的確可以幫助我們快速解決問題，避開許多原本可能會陷入的窘境。只是如果一直都用這種思考模式，我們也很可能會漫無目的的花太多時間在錯誤的事情上面。</p><p>有沒有可能利用一些方法讓我們「看見」自己是怎麼思考的呢？當然有，其實我們只需要一個框架就能夠幫助自己了解自己的思考方式，框架是什麼？ 如果人類的思考像水，那麼框架這類工具就像是一張能夠捕捉著偶然出現的靈光的網子，可以避免「剛剛好像想到什麼，但是忘記了」的情況出現。</p><p>PDCA 筆記其實就是一種思考的框架，PDCA 名字裡的四個英文字就分別代表「Plan （計畫）」 、「Do（執行）」、「Check（查核）」、「Action（改善行動）」。也就是透過四個步驟，在紙上再現了自己從腦內思考到執行之後確認成效的過程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pdca怎麼做">P、D、C、A，怎麼做？<a class="hash-link" href="#pdca怎麼做" title="標題的直接連結">​</a></h3><p>現在讓我們了解 PDCA的概念，並試著使用 PDCA 方法，並以一天的工作任務安排為例子來進行看看！前面提到 P、D、C、A各自代表四個步驟：</p><p>Plan（計畫）
Do （執行）
Check （查核）
Action（改善行動）
我們接下來將一一說明每個步驟所需要列下的資訊，現在先讓我們在紙上畫出每個步驟需要的空間：</p><p><img loading="lazy" alt="Heading Image" src="/assets/images/pdca-method-intro-49b3a263cec0611ce69444516d485fc5.png" width="980" height="561" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="plan--計畫">Plan － 計畫<a class="hash-link" href="#plan--計畫" title="標題的直接連結">​</a></h4><p>你今天有哪些事情想做、哪些會議要開、哪些雜事要處理，這些都可以寫在 Plan 這一欄，你可以隨著自己的喜好，用自己的方式羅列，例如可以依照重要度、或是時間來安排，我覺得沒有限制，不過若是待辦事項很多，最好先從自己想要做的事情開始安排起比較好。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="do--執行">Do － 執行<a class="hash-link" href="#do--執行" title="標題的直接連結">​</a></h4><p>預計執行的任務的實際成果，安排的任務、會議，是否如自己預期的那樣順利完成了？最終的實際成果怎麼樣，有沒有預料之外的狀況發生？在這一欄內以客觀的方式記錄下來，先不用評斷成效好壞、也不需要有臆測，在這個步驟所需要記錄下的，是存粹的事實。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="check--查核">Check － 查核<a class="hash-link" href="#check--查核" title="標題的直接連結">​</a></h4><p>依據上一個步驟「執行」裡面所記錄的，以自己的角度出發來描述為什麼任務能夠順利完成？或是為什麼會遭遇到挫折。覺得哪邊好哪邊不好，都可以在這個步驟裡面寫下來，這個步驟的目的是引導出所謂的自我覺察，所以你可以不必每個都寫，只要針對覺得有問題真的尚待改善、或是有新的心得的地方來寫就好。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="action--改善行動">Action － 改善行動<a class="hash-link" href="#action--改善行動" title="標題的直接連結">​</a></h4><p>最後可以根據上一個步驟裡的覺察，有沒有什麼下次能夠改善的方法，你可能需要根據上面兩個步驟所記錄的內容來思考後， 想出可能的應對措施，思考一下下次如果遇到一樣的狀況該怎麼辦？這邊可以提出任何的假說，不需要設限。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用橫向-a4-紙">使用橫向 A4 紙<a class="hash-link" href="#使用橫向-a4-紙" title="標題的直接連結">​</a></h3><p>紀錄時最好使用橫向的 A4 紙，這樣才能確保你有足夠的空間來記錄，如果畫完格子之後還有其他的空白那更好，剛好可以用來記錄一些瑣事，或相關的事情。通常我在畫完 PDCA 四個格子之後，在最下面還會有一點空間，我就會拿來記一些比較不相關的或臨時出現的點子。</p><p><img loading="lazy" alt="Heading Image" src="/assets/images/pdca-method-note-3b2ba19688ddbfae0b18c4e3ffdaf56d.png" width="980" height="744" class="img_ev3q"></p><p>一個例子
我們來看看一個使用 PDCA 時的例子，因為我個人的 PDCA 筆記幾乎都使用在工作上，所以有一些內容不太適合直接寫出來，這邊若有涉及到工作隱私的部分我會用抽象的名詞或代稱來表示。</p><p><img loading="lazy" alt="Heading Image" src="/assets/images/pdca-method-example-6f4a79ef0c394840f5d9802831ccd73f.png" width="980" height="744" class="img_ev3q"></p><p>上面是一個使用 PDCA 時可能發生的狀況（若有雷同純屬巧合），透過這樣的「思考框架」我們可以看見自己思考的順序和邏輯，讓自己能更專注在自己的目標，進而提高找到解決問題的機會，而不會花一堆時間在走冤枉路上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="假說的重要性">假說的重要性<a class="hash-link" href="#假說的重要性" title="標題的直接連結">​</a></h3><p>「建立假說」這件事在這個 PDCA 方法裡面扮演著重要的角色，因為整個方法在執行的過程可以說是一個「安排執行事項（提出執行面的假說）-&gt;執行並驗證-&gt;思考成效和結果-&gt;提出可能的改善方法（也是假說）」的循環。不斷地提出假說並嘗試各種可行的做法，並且每次都更接近目標一些，可以說是 PDCA 的精髓。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="建立一個長期目標">建立一個長期目標<a class="hash-link" href="#建立一個長期目標" title="標題的直接連結">​</a></h3><p>如果要在日常的工作任務裡面使用 PDCA 的話，請先想清楚你個人的長期目標。舉個例子，請先試著問自己幾個問題：</p><blockquote><p>半年後你想要成為什麼樣的人？獲得什麼樣的能力？
哪裡才是現在真正應該改善的地方？</p></blockquote><p>雖然說能改善的地方當然是盡量通通都改善比較好，但可惜實際上我們不可能成為一個100%完美的人，而且如果沒有想清楚自己最需要改善的地方在哪裡，就很容易對一些雞毛蒜皮的小事情鑽牛角尖。</p><blockquote><p>我的終點在哪裡？</p></blockquote><p>請不要盲目追求無止盡的成長。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="寫在最後">寫在最後<a class="hash-link" href="#寫在最後" title="標題的直接連結">​</a></h3><p>今天的 PDCA 介紹地算是蠻基礎的應用，分享給以前沒聽過的朋友，建議你可以實際做做看，看看這樣的方法是不適合自己的工作模式。想要了解更多細節的朋友，我可以把我最近在讀的相關書籍介紹給你，請參考：</p><p><a href="https://www.books.com.tw/products/0010761289" target="_blank" rel="noopener noreferrer">《讓自己快速進化的PDCA筆記術》</a></p><p>我覺得 PDCA 是我用過後覺得最能夠讓自己循序漸進地去思考並且每次都變得更好一點點的工具，我們不需要追求短時間內很大的改善，畢竟人的性格和習觀是隨著時間養成的，那麼想要有好的改變，也需要相當的時間才能夠做到。</p>]]></content>
        <author>
            <name>Mu Jing Tsai</name>
            <uri>https://github.com/moojing</uri>
        </author>
        <category label="職場心得" term="職場心得"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[寫給職場工作者：工作環境是否會影響一個人的思考方式？]]></title>
        <id>environment-and-way-of-thinking</id>
        <link href="http://blog.powersandwich.com.tw/environment-and-way-of-thinking"/>
        <updated>2021-08-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Heading Image]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Heading Image" src="/assets/images/environment-and-way-of-thinking-head-f0ffc4abca68ca7a75c3ec076cbc1dd0.png" width="980" height="789" class="img_ev3q"></p><p>自從我進入大學階段之後，就一直有人不斷告訴我，要快一點決定未來人生的方向，要趕快想清楚、沒時間了，每次被問到這些問題我都不是很能理解，這個在前面將近一半的學習生涯把學生教成考試機器的教育體系，為何又理直氣壯地期望這些學生在短短幾年內如獲天啓般突然知道自己的人生規劃？</p><p>綜上所述，我目前是一位軟體工程師，今年是我工作的第三年，我依舊在思考人生目標，但值得慶幸的是我正在做自己喜歡的工作（而且我學很快）。雖然對未來職涯方向還沒有很清楚的藍圖，但是對於這幾年來在職場體驗到所發生的人事物依舊有一些心得，所以今天想來跟各位聊聊（個人角度下）工作本身對工作者的長期影響。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="職場制約論">職場制約論<a class="hash-link" href="#職場制約論" title="標題的直接連結">​</a></h3><p>我相信大家應該都了解「環境很重要」這件事，以一個在台灣常見的上班族來說，光是工作的時間每天就有八小時（以上），仔細想想就佔了一個社會人士的人生將近 1/3 的時間，我們往往沒有意識到，這段時間裡面我們所做的事情、交流的對象、交談的方式在長久以來在不斷重複經歷之下，深植在腦海中。</p><p>我們可以用行為心理學裡「操作制約」來看待職場環境，操作制約的核心概念是根據行為產生的後果，會影響個體後續再重複相同行為的可能性。在<strong>操作制約裡有所謂的「增強」與「懲罰」，「增強」指的是個體喜愛、想要的事物，「懲罰」則反之。</strong></p><p>在個體做了某種行為後透過增強，給予想要的獎勵；或透過懲罰，施予不想要的刺激，來影響個體（實際上行為心理學對操作制約有更詳細的分類跟探討，這邊因為篇幅關係無法做太詳盡的說明）。</p><p>如果你已經工作一段時間應該會有所體悟，常常甚至不需要主動學習，剛進入職場後就會有人來告訴你可以這樣做不可以那樣做、什麼時候要做什麼否則就會大難臨頭等等那些所謂職場的淺規則或「不成文的規定」，到頭來我們甚至不會去思考為什麼要樹立這些莫名的規章。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="當音樂課只剩下劃答案卡的聲音">當音樂課只剩下劃答案卡的聲音<a class="hash-link" href="#當音樂課只剩下劃答案卡的聲音" title="標題的直接連結">​</a></h3><p>時間拉回更早更早 — — 或許進入職場前我們早就是這樣學習跟成長的，還記得國小的時候學校的「嘉獎」、老師打的「甲上上上上上 / 特優」、「小過」、「大過」，現在回想起來真的很沒有意義 — — 但當時我們又怎麼會意識到呢？當社團時間只剩下自習、當音樂課只剩下劃答案卡的聲音，也許在熱衷於那些無聊大人訂下的守規矩遊戲時，我們的青春就這樣被被惡狠狠地蓋上了合格認證。</p><p>十幾年過去，開始工作、進入社會後，這樣的情況似乎一點也沒有減少。無聊的大人們養出另一個世代壞掉的大人（ 誰知道呢，也許我才是壞掉的那一邊? ），許多人自以為當上老闆就擁有對別人所有的控制權，慣老闆的八卦早就不算新聞。</p><p>另一部分人成了訓練有素的職場玩家，想盡辦法奉承巴結上司、深諳遊戲規則的這些人，教會了社會新鮮人「是非對錯」，也間接增強了這種盲目尊崇權威的社會結構，即使是在寫這篇文章的當下，台灣社會裡也許也還充斥著這樣的的公司職場環境。</p><p>盲目地追求高薪是一種慢性病
現在在台灣，軟體工程師似乎已經成為一種趨勢，許多人一窩蜂投入軟體產業、補習板跟線上課程處處林立，就是為了獲得更好的物質生活，但我總覺得許多這樣做的人在做決定之前都沒有思考過這樣的決定是否真的適合自己、或是跟價值觀是否相符。</p><p>在這樣的情況下，即使後來這些人進入軟體產業，成功成為軟體工程師，終究還是會因為得不到成就感而無法堅持下去。</p><p>「知道方法的人會去工作，而知道這個人為什麼要工作的人，就會成為他的老闆」 —— &lt;狼與辛香料&gt;</p><p>你永遠是自己的領導者，不管在看這篇文章的你是誰，相信我，就算你是工作者、就算很多人告訴你要找一份穩定的工作、過一個安穩的生活，你永遠都有選擇權。打開選擇權，在職場裡面若發現自己意識到思考的不對勁，就思考看看你是否適合現在的環境、你跟每天相處的同事是否是同一類型的人？</p><p>不要勉強自己，你可以選擇一份安穩的生活，也可以選擇踏上尋找個人定位的旅程 — — 即使身邊願意這麼做的人寥寥無幾。而有時候你需要的只是多一點思考。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="所以呢">所以呢？<a class="hash-link" href="#所以呢" title="標題的直接連結">​</a></h3><p>所以關於今天問題的結論，我會說職場環境所帶來的負面影響對那些了解自己、清楚人生目標的人們是不會有作用的。所以就算現在職場上依舊有許多我們看不慣的陋習，只要願意花時間思考什麼才是最重要的，也許在了解到工作不過是追求個人目標過程中的一種手段後，那些淺規則在你眼中就會變得渺小且微不足道了。</p>]]></content>
        <author>
            <name>Mu Jing Tsai</name>
            <uri>https://github.com/moojing</uri>
        </author>
        <category label="職場心得" term="職場心得"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[原子化學習 — 程式語言中基礎知識的重要性]]></title>
        <id>atomized-learning</id>
        <link href="http://blog.powersandwich.com.tw/atomized-learning"/>
        <updated>2021-08-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Heading Image]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Heading Image" src="/assets/images/atomized-learning-head-ee732abf7d869ada605ba0b77f380a2a.png" width="980" height="593" class="img_ev3q"></p><p>回顧一下轉為前端工程師的這一年經歷，因為一些原因，偶然讓我在將近三個月內就找到新的工作並成功轉職，而在那之前，我自認是一個毫無實戰經驗的打雜工讀生 (在公司只接觸 CMS 系統後端，並不斷重複造輪子)。這篇文章旨在分析並強調學習基礎知識的重要性，以及分享我這一年來學習的心得 ，希望你能夠從這之中得到一些東西，如果有什麼疑問，也歡迎隨時和我一起討論。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="框架還是語言">框架還是語言<a class="hash-link" href="#框架還是語言" title="標題的直接連結">​</a></h3><p>當時剛好是前端框架非常流行的時候，在我的身邊幾乎每個只要是正在入門前端的人都在學習 Vue.js （上手快速），但我並沒有一頭栽進框架的學習旋渦裡面，那個時候我只覺得<mark>就算是學 JQuery ，還是任何一種其他框架，最終最終都必須迎接考驗 JS 語言本身理解度時刻的到來，既然如此就不應該只依賴於任何一種框架</mark>（同樣的東西，不使用任何工具你能做得出來嗎？）。</p><p>後來我找了一堂對 JS 底層運作講的很詳細的線上課程，花了兩個月的時間認真看完並確定理解後，才開始接觸那些主流的框架跟工具。<mark>儘管我比別人還要晚開始，但是在框架的熟悉速度上並沒有比較緩慢，反而因為那些相對來講比較艱澀的基礎知識，讓我更知道目前自己缺少哪些部分，在學習上也能夠更踏實的安排學習目標。</mark>就算現在我還是常常會聽到跟 JS 相關不懂的話題，但是因為基礎理解的夠紮實，後面再自己去研讀，也不會花太多心力。</p><p>直到第一份前端工作離職，開始面試找工作，遇到幾個跟我學齡差不多的同行之後，我才真正意識到我的學習方式所帶來的程度上的落差（集體面試觀察其他人反應得知）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一性原理">第一性原理<a class="hash-link" href="#第一性原理" title="標題的直接連結">​</a></h3><p>這個時候我想到了哲學中的「第一性原理」，<mark>第一性原理是指找到某個問題的根本，綜觀該問題所屬的系統，然後從頭往下探討。</mark>最有名的相關案例是 Elon Musk 分析後發現問題出在人事費用並大幅降低 Tesla 電池成本，讓電動車的普及可能性又往前推進了一大步。</p><p>Elon Musk 能夠找到解方，正是因為他了解電池的組成成分，並做了很詳細的分析、了解整個製作流程後、把可能有問題的模塊再次設計，一步一步優化整個生產流程，才有最後的結果。然而應用在程式學習這點上，第一性原理並沒有這麼宏觀跟難以理解，上面這個案例只是想讓你了解：</p><blockquote><p>在相關領域裡面，你懂的基礎知識越多，發生問題時就能夠越容易找到癥結點。</p></blockquote><p>以前端為例：</p><ol><li>你懂 HTTP 傳遞流程，知道 API 的運作，就有能力辨別問題是否真的出在前端。</li><li>你了解瀏覽器渲染流程，就更容易真正做到效能調教以及產品的優化。 ( 順便舉另外一個例子，你知道前端為什麼要做 SSR的真正原因嗎？ )</li><li>了解 JS 的 Event Queue 後，就更能夠 trace 非同步產生的問題。</li></ol><p>而這一切都是建立在基礎知識上慢慢累積出來的經驗，換句話說，如果連最基本的功夫都懞懞懂懂，也很難對這些技術有更深入的了解跟體會，而我想我就是在無意間遵循了這個原則。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="不太容易做到因為很無聊">不太容易做到，因為很無聊<a class="hash-link" href="#不太容易做到因為很無聊" title="標題的直接連結">​</a></h3><p>老實跟你說，真的要能夠把所有相關的基礎知識都學完，這個過程是一件非常無聊的事情，前端其實並不難，至少以能夠找到工作為目標的話並不難，困難的是在持之以恆。而這終究會關係到你對這項技術是不是真的具有熱情，或純粹只是跟隨趨勢跟潮流（你真的願意每天起床跟離開公司時在第一時間打開 Udemy 一直看一直看一直看嗎？），這個問題我沒有辦法幫你解答，你必須自己再一次好好思考。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="原子化理論">原子化理論<a class="hash-link" href="#原子化理論" title="標題的直接連結">​</a></h3><p>關於程式語言的學習方法，只用「學習基本功」一句話帶過好像有點模糊，那麼也許可以從另一種角度來解釋。在前幾年，一位前端工程師 ( Brad Frost )把化學中原子跟分子之間關係應用在 UI 設計上面，帶起了現在被稱為「原子化設計」方法的風潮。在化學中，所有的物體都是由原子組成，往上聚合成分子，再到有機物，最後慢慢形成我們看到的現實世界。</p><p><img loading="lazy" alt="Heading Image" src="/assets/images/atomized-learning-design-ee49e09061526630c03120b3a00e8dd9.png" width="700" height="486" class="img_ev3q"></p><p>而在原子化設計裡面，<mark>原子所指的是網頁視覺的顏色、文字、框線等等最小單位，這些元素又能夠組成比較小的元件如按鈕跟導航列，慢慢往上構成整個網頁架構，而這一整套架構也被稱為設計系統。</mark>如果像這樣子往上疊加的關係可以用在一整個系統上面，那麼用來解釋系統知識的學習，是再適合不過了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="結合以上兩種方式來看待程式學習">結合以上兩種方式來看待程式學習<a class="hash-link" href="#結合以上兩種方式來看待程式學習" title="標題的直接連結">​</a></h3><p>原子化理論是在<mark>構築事情時，由最小單位開始做起</mark>；而第一性原理則著重於將可見的結果拆解成最小元素然後觀察。藉由結合這兩種概念，<mark>我們就可以把一個乍看龐大的問題拆解成最小單位知識並逐個學習，融會貫通後組合成新事物。</mark>講到這裡實在很難不引用某部著名漫畫(鋼鍊)的經典台詞：</p><blockquote><p>理解、分解、再建構</p></blockquote><p>雖然聽起來很瞎掰，但的確是這麼回事，因為在這整個過程裡，你會很清楚知道哪些是你已經學會、而哪些是你還缺少的，單位知識之間的作用關係又是什麼？所以上述這一句講的其實可以這樣理解：</p><blockquote><p>理解(問題)、分解(需求)、再建構(最終目標)</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="理解問題">理解問題<a class="hash-link" href="#理解問題" title="標題的直接連結">​</a></h3><p>舉個例子，今天你的目標是實作一個10秒內計算點擊次數的競賽小遊戲，你第一時間應該會想到可能會遇到問題的地方有幾個點：</p><ol><li>JS 計時功能</li><li>點擊畫面後自動加一分</li><li>紀錄歷史戰績</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="分解需求">分解需求<a class="hash-link" href="#分解需求" title="標題的直接連結">​</a></h3><p>上面幾點可以再次個別分解成更細小的技術需求</p><ol><li><p>計時功能：</p><ul><li>「 JS Date 物件」</li><li>「如何讓瀏覽器每秒重新渲染一次」( SetInterval )</li><li>「時間到之後如何終止遊戲」( Callback )</li></ul></li><li><p>點擊畫面後自動加一分</p><ul><li>了解瀏覽器的事件序列」</li><li>「瀏覽器點擊事件 API 」</li></ul></li><li><p>紀錄歷史戰績：</p><ul><li>「熟悉陣列操作」</li><li>「了解瀏覽器 cookie 或是 localStorage 差別」</li></ul></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="組合成最終目標">組合成最終目標<a class="hash-link" href="#組合成最終目標" title="標題的直接連結">​</a></h3><p>熟悉個別技術點，思考如何組合成最後的功能，藉由這樣子的思維練習讓自己慢慢對問題的架構更了解。而其實這非常相似於第一性原理，但是概念上卻又處於互補的關係。</p><blockquote><p>第一性原理注重系統，而原子化理論著重在元素與元素之間的關聯</p></blockquote><p>前者把重點放在分析整個系統，後者注重每個元素如何互相搭配並組成更大更完整個元件，而結合這兩個觀念，才能夠更全面的從分解問題，到構築一個系統。</p><p>最後，總結一下這篇文章想要帶給你的三個觀念：</p><ol><li>第一性原理 — 學習基礎知識雖然沒辦法馬上見效，但關鍵時刻非常重要</li><li>原子化理論 — 你如何看待與安排你的學習</li><li>試著結合以上兩種觀點來思考碰到的問題</li></ol><p>以上。</p><p>稍微整理了這一年來我自己體會到的方法，希望這些觀念對你的學習能夠多多少少有一點幫助，後續我也會繼續將這些方法應用在未來的學習上，一起加油吧！謝謝你的閱讀。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="參考資料">參考資料<a class="hash-link" href="#參考資料" title="標題的直接連結">​</a></h3><ul><li><a href="https://medium.com/gurugurugo/%E5%BC%95%E7%99%BC%E9%A9%9A%E4%BA%BA%E7%9A%84%E7%88%86%E7%82%B8%E5%8A%9B-%E9%8B%BC%E9%90%B5%E4%BA%BA-elon-musk-%E7%9F%A5%E8%AD%98%E8%BB%8D%E7%81%AB%E5%BA%AB%E4%B8%AD%E6%9C%80%E5%BC%B7%E6%AE%BA%E5%82%B7%E5%8A%9B%E7%9A%84%E6%AD%A6%E5%99%A8-%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86-first-principle-80de738799ce" target="_blank" rel="noopener noreferrer">引發驚人的爆炸力！ Elon Musk 知識軍火庫中最強殺傷力的武器 : 「第一性原理」（ First Principle )</a></li><li><a href="https://www.uisdc.com/atomic-design-theory" target="_blank" rel="noopener noreferrer">原子化設計</a></li><li><a href="https://jamesclear.com/first-principles" target="_blank" rel="noopener noreferrer">First principles thinking</a></li></ul>]]></content>
        <author>
            <name>Mu Jing Tsai</name>
            <uri>https://github.com/moojing</uri>
        </author>
        <category label="職場心得" term="職場心得"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[職場之內、技術之外]]></title>
        <id>beyond-technical</id>
        <link href="http://blog.powersandwich.com.tw/beyond-technical"/>
        <updated>2021-08-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Heading Image]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Heading Image" src="/assets/images/beyond-technical-heading-8e40f5c225dedd8354e68586cba2583f.png" width="480" height="332" class="img_ev3q"></p><p>在新創工作剛滿一年，覺得正值一個可以好好整理所有收穫的時間點，現在回想起來的確學到許多以前不知道的方法跟思維，但因為都是比較零散的個人經驗，所以一直在想要以什麼為主軸來跟大家分享，既然暫時沒辦法有一個比較系統性的整理，我就來說說我在這段時間所學到的幾個工作中最重要的特質好了。</p><p>常聽到有人說，在新創工作一年可以抵其他工作好幾年的經驗，因為會有飛快的成長，現在想想以我自己的過往經驗來比較還真的是這樣。不過大多數人對成長的認知無外乎是學習到更多技術、解決更多問題，最後獲得更高的職位、更好的工作、更多的收入。然而除了薪水跟值外等等偏向外在的因素，我認為更重要的是能夠影響每個人更長遠發展和長期回報的內在要素和相關能力。</p><p>這些偏向內在要素可能並不那麼外顯，也就是說在一個人的工作履歷上是比較難馬上看出來這些特質的 — — 儘管如此，這些特質還是會透過某些行為舉止無意間表現出來，所以雖然若以成功錄取一份工作為目標，短期內技術能力與領域相關知識等等硬實力大概是一開始最直接能夠決定結果的因素，但事實上要正確評估一個人工作能力的優劣，是在進入職場後才真正開始，也絕對不會只看技術強不強大，通過面試充其量只不過是拿張門票而已 。那麼，一個人在所屬的專業領域裡面是不是能夠讓自己與日俱進，除了看專業技術，還需要什麼呢？</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="專業之外的軟實力">專業之外的軟實力<a class="hash-link" href="#專業之外的軟實力" title="標題的直接連結">​</a></h3><p>以我自身目前的了解來總結，大致有三點可以與各位分享的：</p><ul><li>溝通能力：確定別人了解你想表達的事情、知道別人的真正疑惑跟目的</li><li>流程的能力：優先順序、估時、困難度</li><li>規劃能力：執行前的思考 ，想得越完整就越有彈性</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="溝通能力">溝通能力<a class="hash-link" href="#溝通能力" title="標題的直接連結">​</a></h3><p>職場上與人際相關的能力，最常聽到的無非是思考方式、待人處事和面對問題的心態等等，這些能力所綜合發展最後表現出來的特質就常常被稱為是一個人的溝通能力。而就工程師這個職業來說，所有的軟實力裡面我認為溝通能力應該是最首要要被重視的，這個應該不難理解，可以想想看在所有的需求從需求方產生，再到 PM 規劃、然後到設計執行畫面視覺的安排，最後到你身上準備實作的階段，這中間經過了多少次層層的溝通？只要有一個環節出現溝通的問題就可能讓整件事情出現紕漏，所以，先確立正確的執行方向，確保你與需求方都有接收到正確的訊息，再搭配強大的專業能力才有意義。</p><p>就像我們常聽到的「先學會聆聽，才能有效溝通」這句幾乎是老掉牙的言論，不過也幾近是放諸四海都適用的原則，有些人在溝通時只講自己想講的，沒有理解別人真正想要的東西是什麼，或是其實根本誤會了方向，這些都是導致溝通失準的原因。但是沒關係，幾乎每個人都曾經有過這樣的狀況，這種能力並非能夠在一夕之間就練成的。比起因為害怕溝通錯誤而導致不敢發言，隨時意識到自己在溝通的過程裡面是否有什麼癥結點沒有釐清、思考下次遇到同樣狀況如何改善，久而久之就會慢慢能夠更順暢的與別人合作。</p><p>還有一個能夠快速增加溝通能力的方式，那就是 — — 分享吧，就像我現在正在做的一樣。透過分享，你會越來越知道怎麼表達心中的想法，因為不管是透過寫文章還是講述的方式，你都必須現在腦中思考過許多次。況且這是一個打團體戰的時代，在各個領域隨時都有新的技術或是服務出現，靠一己之力是沒辦法快速上手每件事情的，帶著分享的心態面對每個問題，讓更多人能夠與你一起成長，當有越多人慢慢有能力解決更複雜問題之後，說不定這些人可以反過來讓你學習，仔細想想這不也是個有趣的過程嗎？</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="流程的能力">流程的能力<a class="hash-link" href="#流程的能力" title="標題的直接連結">​</a></h3><p>「流程」指的當然是工作流程，工作流程是你如何順利的在一段時間內把接收到的任務處理掉。而這中間牽扯到了估算時長、任務複雜度計算、以及最重要的優先順序等等因素。在接收到任務並開始執行到完成的過程中，完成度的推進往往不會是線性的，很容易我們在做到一半的時候才發現案情不單純，有另外一個比表面上看起來更麻煩的問題需要處理。所以為了避免意外發生，是否要優先處理看起來比較可能會出現問題的任務，或是在執行任務的階段想辦法保留彈性。隨時調整任務執行的順序，常常就因人而異了。</p><p>不難想像，上述講到的三點其實是環環相扣的，先足夠瞭解了任務的複雜度，才有辦法知道自己大概多久能夠完成、也才能順暢安排每個任務的執行順序。在職場裡面，你會在每個人身上看到不同的工作流程，因為對每個人來說都有各自適合的做事方法，對你來說也是。所以你在你的職涯裡面必須一直不斷思考自己的工作方式，隨時調整看看有沒有能夠改善的環節，也許一開始沒有方向的時候會趨向於向某個前輩模仿，不過最終你一定會找到屬於自己的工作風格的。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="規劃能力">規劃能力<a class="hash-link" href="#規劃能力" title="標題的直接連結">​</a></h3><p>知道怎麼溝通、怎麼透過流程解決問題之後，另外一個無法被忽視的要素就是需求規劃了，學會怎麼規劃需求也能夠讓預先思考需求的細節、難易度，好讓你能夠合理安排任務執行時的先後順序，所以你也可以說這是前述工作流程的一環。規劃需求的能力著重於「先思考、後動手」。你可能有過一種經驗是因為時程的關係，不得已急著做完某個需求，只好先動手再說，以至於最後才發現漏掉處理了某個重要的情境，下場就是幾乎全部重來。</p><p>熟練規劃的能力，習慣在實作之前先在腦海中想過一遍大概要實作的方式，就可以幫助你改善這個問題，減少像這樣打掉重練的尷尬狀況一再發生，也許搭配一些圖片、也許條列一些文字，都可以幫助自己整理思緒。一旦開始試著這麼做，你會發現在接到任務後，要實作之前，就會越來越清楚整件事情的輪廓，伴隨而來的就是更有餘裕一次考慮到更多的條件跟細節。同樣地這個能力我相信沒有人可以一開始就做到最好，許多人都是伴隨著經驗的累積而慢慢練成這樣的能力的，相信你也可以。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="寫在最後">寫在最後<a class="hash-link" href="#寫在最後" title="標題的直接連結">​</a></h3><p>以上是我近一年跟許多前輩所學到認為比較重要的非技術能力，醞釀了兩個禮拜終於整理下來了，在這邊分享給大家。我認為長期看來，這些非技術能力對個人成長的幫助一定會超越你現在正在學習的技術能力，因為技術是會隨著時間一直演變下去的，十年前版本的 JavaScript 放到現在來看可能早已有許多不適合的地方，所以需要不斷地更新跟學習。但不管技術怎麼變，人性、與人交際相處的方式和你面對問題的思考方式，是可以持續累積和成長的。所以我也會建議你一定要找到有辦法增進與展現上述幾種能力的工作環境，不要長期處於太過於封閉的環境中。</p><p>這類工作心得文我通常每隔一段時間，或有心得後會整理下來給大家參考，希望可以幫助到你們，而這樣子的文章同時也能讓我衡量自己的成長。舉例來說，看看半年前寫的工作心得文，再與這篇文章做比較，我覺得我可以明顯感受到我自己對整個工作流程與中間環節有了不一樣程度的認知，那麼，希望下次能有更深刻的收穫，感謝各位的收看，下回見了。</p>]]></content>
        <author>
            <name>Mu Jing Tsai</name>
            <uri>https://github.com/moojing</uri>
        </author>
        <category label="職場心得" term="職場心得"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[每個衝擊都是一次學習的機會]]></title>
        <id>a-learning-chance</id>
        <link href="http://blog.powersandwich.com.tw/a-learning-chance"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Heading Image]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Heading Image" src="/assets/images/a-learning-chance-heading-09b336048db89df7de489aac179e76c7.png" width="980" height="723" class="img_ev3q"></p><p>好久不見。各位最近過得如何呢 ? 是不是又往自己的目標前進了一點 ? 一段時間沒有寫文章了，由於轉換工作環境的緣故，自從三月以來，這是第一次可以空出時間好好寫下一些東西。</p><p>我目前在 Snapask 任職，這是我第一次到比較有規模的團隊裡面，有很多專案流程的細節是以前沒有接觸過的，所以這幾個月來相對於技術學習上。我在思考方式以及工作方法等方面比較有心得，所以這篇文章不會有技術內容，而是會跟大家分享我近期的收穫，或許能夠給未來也跟我面臨相似問題的人一個參考。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="個人過往技術狀況">個人過往技術狀況<a class="hash-link" href="#個人過往技術狀況" title="標題的直接連結">​</a></h3><p>有一些經驗的 Junior，靠自學誤打誤撞進入前端領域（剛滿兩年），前面經歷的都算是較小型的新創，團隊大多都不超過十人。當時工作較為偏向單打獨鬥，內容較有彈性，技術工具及解決方法策略的選擇上相對自由，可以自行決定然後直接執行，但時程規劃比較沒有組織跟流程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="參與新的團隊">參與新的團隊<a class="hash-link" href="#參與新的團隊" title="標題的直接連結">​</a></h3><p>因為以前合作經驗較少，所以第一次進到團隊，有很多新的工作方法以前沒有參與跟執行過，例如大家認為很常見的 Code Review 、例如跟主管們 1 on 1 、還有 scrum 中的會議流程…，其實有許多細節。</p><p>不過因為實際會遇到的工作細節每間公司一定都會不同，所以在接下來的內容我不會一一詳細的解說，我會以個人成長的角度來分享在這個新環境中學到、並為我在職涯發展上帶來不同見解的觀點。</p><p>從就職開始說起，那些剛到職的 Junior 們可能聽說過很多次，不過我可以再用我的個人經驗告訴你，永遠不要「只」以薪水來決定工作的選擇（當然該拿的還是要拿，不過如果你真的很想體驗一整年都沒有成長的倦怠感，那麼你應該試試）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="進入新環境的第一要務">進入新環境的第一要務<a class="hash-link" href="#進入新環境的第一要務" title="標題的直接連結">​</a></h3><p>我想對大部分的 Junior 來說，進入公司後最重要的一件事就是優先找到能夠讓你學習並成長的對象 （ Mentor / Role Model )，這長期來講會是一個重要的外在因素，不用擔心找不到，每個人都有值得學習的部分，但如果你觀察幾個月之後還是沒有答案，那麼你可能到錯地方了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="適應之後">適應之後<a class="hash-link" href="#適應之後" title="標題的直接連結">​</a></h3><p>工作一段時間差不多適應新的環境以後，可能會有兩種情況，一種是工作模式跟以前所習慣的差不多，一種是跟我比較像也就是公司的工作流程跟以往使用的有比較大的差距。不管是在哪一種情況底下，在這個時期都應該要著重於一件事情：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="找到你想做的事--想解決的問題">找到你想做的事 / 想解決的問題<a class="hash-link" href="#找到你想做的事--想解決的問題" title="標題的直接連結">​</a></h3><p>不要把自己當勞工來看，找到一個你想達成的長期目標，通常這個目標不會是被分派的任務之一，因為你會有自己的目標，公司也會有自己的步伐要前進，想辦法找到這兩者間的平衡點。這會回到一個問題是你當初選擇這間公司的原因、或是說你想在這間公司想得獲得的經驗、講官腔一點也能說是未來展望。相較於上面提到的外在因素，這則會是長期的內在動機，也是遇到阻礙時能夠支撐你的重要原因。</p><p>對那些適應良好的人這件事可能會自然地發生。即使是對不太能適應或遇到麻煩的人，若你有確保做好第一點提到的確保工作環境有學習對象，那麼你應該能夠得到一些引導而在設法解決後再度回來思考這個問題。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="我獲得的幾個觀點">我獲得的幾個觀點<a class="hash-link" href="#我獲得的幾個觀點" title="標題的直接連結">​</a></h3><ol><li><p>看見每個人價值觀的不同
在中小型團隊裡面會遇到許多不同的人，幾個月的合作跟交流下來我可以明顯感受到每個人都有每個人的做事方法跟步調，這是一個很棒的地方，因為每個人都有能夠學習的地方，試試看跟他們交流你的想法，常常能夠讓你從不同角度重新看帶事情。</p></li><li><p>先想清楚，再動刀
這一點，講老套一點就是三思而後行，在執行某個任務之前應該先在腦中演練過要執行的細節，這個 pattern 不只是工程師的基本能力，生活中很多地方都能夠應用。也避免邊做邊想讓自己遭遇一團混亂的處境。
以我的經驗來說，在以往的工作經驗裡面我都可以快速執行想做的方法然後遇到問題再快速設法解決，但在注重工作流程的公司這麼做就很容易遇到狀況。</p></li><li><p>不斷尋找工作流程上能夠改善的地方
這不管對哪一個階段的工作者都很重要，但我相信對初出茅廬的 Junior 工程師來說尤然。每個人在執行上都會有盲點，對較為資深的工程師來說這些盲點可能不會是個大問題，但對資淺工程師來說的話，一旦某個環節碰到問題，通常就會讓他們立刻明顯的感受到阻礙。</p></li><li><p>使用新工具：蕃茄鐘
這一段呼應上一點，我是一個非常容易分心的人，因為我對許多身邊發生的事感到好奇，我相信這是我的優點。不過這個特點對於完成任務來說反而是一個問題。我知道我需要建立一個能夠讓自己專心的工作模式，試了很多方式後決定開始試試看使用蕃茄鐘，沒想到一試成主顧。</p></li></ol><p>基本上蕃茄鐘就是讓自己專心時間後，再放鬆一小段時間，然後持續進行這個循環。對我來說感受比較明顯的地方有：</p><ul><li><p>明確感到時間的流逝：
也就是增強對時間的感知，以往因為較長時間的連續執行工作，有時候容易造成正在做的事情已經偏離最一開始想要達成的目標，但自己還沒有察覺，在番茄鐘的工作法底下比較能夠知道目前正在做的某件事情已經花掉多少時間。</p></li><li><p>比較能夠把一件大任務切成許多小部分：
因為蕃茄鐘的這種模式，所以在使用時自然必須學著切分任務，再開始進行之前先想好這段時間要做什麼事情，並在結束後來看看自己的成效。</p></li><li><p>適度讓大腦休息：
長時間的連續工作真的比較容易遇到盲點，例如有時候遇到某個問題解不掉，然後又執著在錯誤的程式碼環節，就容易卡住很長一段時間，但往往休息一段時間後再回來，不就後就能找到癥結點。</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="勾勒自己的未來">勾勒自己的未來<a class="hash-link" href="#勾勒自己的未來" title="標題的直接連結">​</a></h3><p>以上就是我近期的心得，寫在最後面，有一件應該要常常被思考的事情是去設想自己在近幾年之後在工作領域裡的角色定位，你想要有能力做到什麼樣的事情？解決什麼樣的問題？這些都是最基本卻又很容易被忽略的事情。</p><p>畢竟在這個工程師這個行業裡頭，技術是學不完的，但你的時間卻非常有限。不知道這些經驗能夠幫助你到什麼地步，不過還是希望你能夠有所收穫，不用免強自己做個鐵人、也不要甘於當個水手，做個靈活的海盜，適當利用環境、武器跟手邊的資源，該守就守，該進攻進攻，容許自己能夠時時刻刻調整航向跟目的地。如果將來我們能夠在航道上相遇，那麼希望我能夠ㄧ如往常地帶給你一些新奇的東西與驚喜。就寫到這，下次又等到我有空時再見了！</p>]]></content>
        <author>
            <name>Mu Jing Tsai</name>
            <uri>https://github.com/moojing</uri>
        </author>
        <category label="職場心得" term="職場心得"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[React 設計模式 - 複合元件]]></title>
        <id>react-design-pattern</id>
        <link href="http://blog.powersandwich.com.tw/react-design-pattern"/>
        <updated>2021-07-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Heading Image]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Heading Image" src="/assets/images/react-design-pattern-pink-cloud-e140d20c2b2ba7e1ae4630428e933a68.png" width="800" height="697" class="img_ev3q"></p><p>一般來說，在進行正式的專案開發，製作可以重複被使用的元件時，常常也必須考慮到元件的彈性、與可維護性。因為我們不知道在未來，這個元件會因為產品的需求而產生怎麼樣的調整，所以最低程度地保持元件的可擴充性就可以讓開發者在這個時候比較輕鬆的以最小限度的影響來達成想要的修改。</p><p><strong>複合元件( Compound Component )</strong>就是一種可以同時提高可維護性跟彈性的元件設計方法，或稱為設計模式（ Design Patern ) 。設計模式一詞源自更早期的軟體界發展歷史，這個詞可以用來代稱那些應付經常出現問題的解決辦法。亦即設計模式是經年累月透過所有軟體界的開發者不斷地遇到相同或類似問題之後，慢慢整理出來的方法。有一些設計模式是所有語言都可以通用的，例如你可能會聽過的「 工廠模式 」、「 觀察者模式」。而有一些模式是針對特定情境的問題所設計的，我們今天要談的複合元件就是前端元件開發的設計模式之一。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="需要的先備知識">需要的先備知識<a class="hash-link" href="#需要的先備知識" title="標題的直接連結">​</a></h3><p>這篇文章主要會講解如何設計一個複合元件，在繼續往下閱讀之前，你可能要確保自己了解 React children 與 context 的相關概念，才能夠比較輕鬆的閱讀這篇文章所提及的內容，在這邊附上幾篇可以參考的資源：</p><p>React Children — 操作元素的 React 原生 API ：</p><ul><li><p><a href="https://codeburst.io/a-complete-guide-to-props-children-in-react-c315fab74e7c" target="_blank" rel="noopener noreferrer">A Complete Guide To props.children In React | codeburst</a></p></li><li><p><a href="https://reactjs.org/docs/react-api.html" target="_blank" rel="noopener noreferrer">官方文件 — React Top-Level API</a></p></li><li><p>React 裡面 Context 的概念：
<a href="https://reactjs.org/docs/context.html" target="_blank" rel="noopener noreferrer">官方文件 — Context</a></p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="複合元件是什麼">複合元件是什麼<a class="hash-link" href="#複合元件是什麼" title="標題的直接連結">​</a></h3><p>複合元件，或稱合成元件 ( Compound Component ）可以從詞面上看出它大致的意思，就是指數個聚集在一起，並有某些相互關係的元件。透過複合元件，可以讓兩個或兩個以上相關聯的元件用一些不明顯的方式來共用狀態，這是什麼意思，而複合元件到底又解決了什麼樣的問題呢？</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="元件常見的多層結構問題">元件常見的多層結構問題<a class="hash-link" href="#元件常見的多層結構問題" title="標題的直接連結">​</a></h3><p>舉我們常見的下拉選單為例，如果我們現在想要製作自己的選單元件，最直觀的製作方法會是直接創造一個元件，然後把所有相關的資料傳入：</p><p><img loading="lazy" alt="example1" src="/assets/images/react-design-pattern-example1-e34661024f470999f05b3645835a9129.png" width="800" height="540" class="img_ev3q"></p><p>上面的程式碼範例只是一個示意，所以並沒有考慮到 CSS 的樣式，這邊會以狀態傳遞的方式為重點。所以以這個下拉選單的例子來說，我們會把整個選單的名字跟對應的數值，直接傳入這個 <code>&lt;Select/&gt;</code> 元件裡面。</p><p><img loading="lazy" alt="example2" src="/assets/images/react-design-pattern-example2-4916e0151915393b386072e929c76227.png" width="800" height="261" class="img_ev3q"></p><p>但是這麼一來除了沒辦法直接存取到 <code>&lt;Option/&gt;</code> 元件之外，你也可以發現這份相關的選單資料其實是從最上層傳入 <code>&lt;Select/&gt;</code> 元件之後，再次被傳入 <code>&lt;Option/&gt;</code>，<code>&lt;Option&gt;</code>這個元件才有辦法拿到需要用來顯示的選項內容與對應數值。</p><p>一般我們不會樂見這種資料被層層傳遞的使用方式，你可能覺得兩層可能還好，不會太難看出它們的關係，但在實際開發時總是無法永遠確保不會有需要第三層的情況出現，因此雖然難免還是有些不得已必須這麼使用的情況，大多時候對開發者來說這種情況當然是越少越好。你可以想像使用這個用法製作的元件，在當所必須傳入的屬性隨著時間和需求的改變而變得太多時，它會變得越來越難看清楚每個屬性所對應的內容，和與之相關的流程邏輯。</p><p>對上面的 <code>&lt;Select/&gt;</code> 元件來說，也許一個比較好的設計方式最好還是能夠跟原生的 select 與 option 標籤具有同樣的使用方式：</p><p><img loading="lazy" alt="example3" src="/assets/images/react-design-pattern-example3-654a549ffaa07721cce9e0920600dee6.png" width="800" height="162" class="img_ev3q"></p><p>當我們把 <code>&lt;Select/&gt;</code> 元件用某種方式拆分成兩個個別獨立，且相關連的元件之後，就能夠享有一個好處是能夠把元件的樣式內容分開來管理，也就是說我們在設計元件時不需要把所有的程式碼塞在一起。而除了讓內容分離之外，使用複合元件的另外一個很大的好處是能夠讓狀態在這兩個相關連的元件之間共享，這麼一來也可以減少把狀態「傳到上層再傳到下層」的情況發生。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="複合元件的好處">複合元件的好處<a class="hash-link" href="#複合元件的好處" title="標題的直接連結">​</a></h3><p>綜上所述，由於複合元件原本就是為了讓元件之間的相依，並提高使用彈性的方法。所以他所帶來的好處也不難理解：</p><p>讓開發者能夠更容易且隨心所欲控制元件，例如：元件的排列順序。
讓相關元件扁平化，可以使用在同一層而不用全部包在一個地方。
元件內容分離，讓元件更容易管理，就像我們即將要做的：把上面原本的 <code>&lt;Select/&gt;</code> ，拆出 <code>&lt;Option/&gt;</code>，分離成兩個元件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="以-select-為例子來設計複合元件">以 <code>&lt;Select/&gt;</code> 為例子來設計複合元件<a class="hash-link" href="#以-select-為例子來設計複合元件" title="標題的直接連結">​</a></h3><p>下拉選單是前端一個很常見的需求，尤其我們因為樣式的關係，無法使用原生的 Html 元素，所以常常需要客製化的製作。這邊我們就來看看怎麼利用 React 來設計一個跟前端原生的 <code>&lt;select&gt;</code> 元素使用方式較為相近的元件吧！在這個例子裡面，我會以 Class Component 為基礎來進行設計。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="元件的條件要求">元件的條件要求：<a class="hash-link" href="#元件的條件要求" title="標題的直接連結">​</a></h3><p><code>&lt;Select&gt;</code> 與 <code>&lt;Option&gt;</code> 兩個元件必須要能夠分開使用而不是全部放在同一個元件中，像是這樣：</p><p><img loading="lazy" alt="example4" src="/assets/images/react-design-pattern-example4-847e282cd638afcf0b32dbbf49f3013b.png" width="800" height="335" class="img_ev3q"></p><p><code>&lt;Select/&gt;</code> 必須能夠根據其子元素的所有 <code>&lt;Option/&gt;</code>元件內容以及排列順序來顯示下拉清單
元件的製作結果如下：</p><p><img loading="lazy" alt="result1" src="/assets/images/react-design-pattern-result1-67a5754c56c9fad719e61d8353138f27.gif" width="712" height="444" class="img_ev3q"></p><p>先思考元件結構
通常複合元件中，會有一個作為父層元件的主元件，而由其他的元件作為子元件。而在 <code>&lt;Select/&gt;</code> 與 <code>&lt;Option/&gt;</code>的例子中則比較單純，只有父層的 <code>&lt;Select/&gt;</code> 與子層的 <code>&lt;Option/&gt;</code>。以這個架構為前提之下，我們可以繼續往下想想另外幾個問題，那就是：</p><p>作為父層元件的 <code>&lt;Select/&gt;</code> 是怎麼知道在它下層的 <code>&lt;Option/&gt;</code> 的內容的？
<code>&lt;Select/&gt;</code> 又是怎麼比對出當下使用者所選到的選項的？
只要能夠解答這兩個問題，我們基本上就掌握了實作這個 <code>&lt;Select/&gt;</code> 複合元件的關鍵。</p><p>首先，第一個問題的思考方向是一個很常見的 children 屬性，我們只要透過這個屬性就能夠取得「被放入」元件的內容，也就是所有的 <code>&lt;Option/&gt;</code> 元件。而關於 <code>&lt;Select/&gt;</code> 是怎麼知道目前所選的數值的？可想而知的是在 <code>&lt;Select/&gt;</code> 內一定會有一個狀態負責儲存目前被選中的值。</p><p>另外我們再每個 <code>&lt;Option/&gt;</code> 被選中時也必須進行更新這個被選中數值的動作，所以我們也需要在 Option 元件上面掛上對應的 onClick 事件，這麼一來當 <code>&lt;Option&gt;</code> 被點擊時，<code>&lt;Select/&gt;</code> 才有辦法知道被選中的 <code>&lt;Option/&gt;</code> 的數值是哪一個。關於這一點我們可以透過 React 的相關 API ： Children.map 以及 cloneElement 來達成。</p><p>Children.map 負責巡訪每個 <code>&lt;Option/&gt;</code> 子元件 ， cloneElement 則複製一個新的 Option 並讓我們可以在這個時候再次傳入額外的屬性。</p><p><img loading="lazy" alt="example5" src="/assets/images/react-design-pattern-example5-3f28917f9fa6cd2c585ccc255856c28c.png" width="800" height="310" class="img_ev3q"></p><p>藉由上述的程式碼片段可以看出我把個別的子元件內容傳給了 onClick 事件，接下來在事件裡面只要知道要儲存什麼數值藉以比對選中的選項，並拿到元件上對應的屬性值，就能夠透過這個數值進行比對。</p><p><img loading="lazy" alt="example6" src="/assets/images/react-design-pattern-example6-a841f46a1ad3083036802d037744289e.png" width="800" height="631" class="img_ev3q"></p><p>在點擊事件內雖然我做了許多件事情，不過可以看到我從 child 的 props （<strong>也就是 <code>&lt;Option/&gt; </code>上的屬性內容</strong>）取出兩個屬性值，分別為 value 以及 optionKey，其中 optionKey 是每個 <code>&lt;Option/&gt;</code>上都會有，用來區別選項且應該要不重複的值，之後我們就可以拿這個值來決定目前所選中的選項是哪一個。</p><p>接下來的流程就很單純，既然我們可以拿到 <code>&lt;Option/&gt;</code> 上的屬性，我們就能夠拿出來跟儲存在 <code>&lt;Select/&gt;</code> 裡面，代表被選中的 <code>&lt;Option/&gt;</code> 的 selectedOptionKey 這個狀態做比對，如下：</p><p><img loading="lazy" alt="example7" src="/assets/images/react-design-pattern-example7-791aeb44acaca490882017aec0a9487f.png" width="800" height="360" class="img_ev3q"></p><p>我們直接利用 isSelected 以布林值的形式傳給下層的 <code>&lt;Option/&gt;</code>，這麼一來 <code>&lt;Option/&gt;</code> 就能夠透過這個數值決定要顯示什麼樣的內容，或是樣式，我們來看看 <code>&lt;Option/&gt;</code> 的內容。</p><p><img loading="lazy" alt="example8" src="/assets/images/react-design-pattern-example8-0dfd789423fabc2e38bc8e4b1900e230.png" width="800" height="360" class="img_ev3q"></p><p>由於這個例子中 <code>&lt;Option/&gt;</code> 需要顯示的東西和需要判斷的邏輯比較單純，所以元件內容也比較單純，但可以看到我們拿到從 <code>&lt;Select/&gt;</code> 元件裡面傳入的兩個屬性來做一些顯示和判斷，這兩個屬性都不是在使用元件時傳入的，而是從 <code>&lt;Select/&gt;</code> 元件來，所以如果不了解原理的話，單看 <code>&lt;Option/&gt;</code> 這個元件根本就沒辦法直接看出來處。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="利用-class-component-靜態屬性">利用 Class Component 靜態屬性<a class="hash-link" href="#利用-class-component-靜態屬性" title="標題的直接連結">​</a></h3><p>通常複合元件在設計時會把複合元件中的子元件掛在父元件上，而因為在本篇文章所舉的例子裡面，剛好用到的是 Class Component ，所以可以利用 Class 中靜態屬性的概念，讓兩個看似分離的元件，更明確的產生關聯，所以我們在 <code>&lt;Select/&gt;</code>元件內會多做一件事情：</p><p><img loading="lazy" alt="example9" src="/assets/images/react-design-pattern-example9-6d4175ae3084a055dd988cef3c90d20b.png" width="800" height="112" class="img_ev3q"></p><p>這麼一來開發者就可以用 <code>&lt;Select.Option&gt;</code> 來表示 <code>&lt;Option/&gt;</code> 元件，也可以讓使用的開發者馬上理解兩者是有關聯的，而這也是你在各大React UI 元件框架裡面常常會看到的用法。你可能會問：為什麼可以在標籤內存取 Select 底下的屬性 Option ?</p><p>這就要回歸到語法的本質了，要了解這件事你必須先了解一件事就是，<strong>這邊所使用的 &lt;..&gt; 角括號並不是原生的 Html 標籤，而是所謂用來簡化 React 寫法的 JSX 語法</strong>，它所代替的程式碼片段其實是最早 React 內的 React.createElement 方法，參考下面的例子：</p><p><img loading="lazy" alt="example10" src="/assets/images/react-design-pattern-example10-1587f3b1911122403d46f149e62cb582.png" width="800" height="211" class="img_ev3q"></p><p>以上面這個元件為例，下面兩種用法所產生的結果都是一樣的：</p><p><img loading="lazy" alt="example11" src="/assets/images/react-design-pattern-example11-50fcd108a73519dded72786c30124c92.png" width="800" height="137" class="img_ev3q"></p><p>JSX 這種看起來像是 Html 標籤的用法其實就是簡化的 React 寫法，既然原本 React 就是透過把 JavaScript 的元件類別傳入 createElement 這個方法中，在這個前提之下<strong>它所接收的類別當然與一般 JavaScript 的類別並無二致囉</strong>。這個用法對不了解的人看起來可能會有點眼花撩亂，但其實其中的原理就是這麼單純而已。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="善用-context-api">善用 Context API<a class="hash-link" href="#善用-context-api" title="標題的直接連結">​</a></h3><p>雖然在這個例子裡面我們沒有使用到，不過若是想要設計的複合元件結構比較複雜，有多層元件結構的話，可以利用 React 提供的 Context API 來進行跨多層元件的數值內容傳遞。</p><p><img loading="lazy" alt="example12" src="/assets/images/react-design-pattern-example12-c71481e254ed58f287450a8e786c4f86.png" width="800" height="162" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="最終完成的結果">最終完成的結果<a class="hash-link" href="#最終完成的結果" title="標題的直接連結">​</a></h3><p>在上面的內容之中我只解說幾個最關鍵的部分，至於沒有講到的其他細節，就請讀者自己思考看看囉，在這邊附上完整的程式碼範例。</p><iframe src="https://codesandbox.io/embed/compound-compoennt-selectoption-u1x4w?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="Compound Compoennt - Select/Option" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 class="anchor anchorWithStickyNavbar_LWe7" id="動手試試看">動手試試看<a class="hash-link" href="#動手試試看" title="標題的直接連結">​</a></h3><p>本篇文章的是以 Class Component 為例子來進行設計這個複合元件，不過在撰寫這篇文章的此刻，Functional Component 是實際開發時比較主流的元件類型，<strong>其實利用 Functional Component 照理說也能夠設計出使用方式與這個例子完全一樣的複合元件</strong>，讀者們在了解複合元件的概念後，也可以自己嘗試使用 Functional Component 來實做看看自己的複合元件，希望這篇文章能夠幫助到你。那麼，就先說到這囉！</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="參考資源">參考資源<a class="hash-link" href="#參考資源" title="標題的直接連結">​</a></h3><ul><li><p><a href="https://codeburst.io/a-complete-guide-to-props-children-in-react-c315fab74e7c" target="_blank" rel="noopener noreferrer">A Complete Guide To props.children In React | codeburst</a></p></li><li><p><a href="https://blog.martindidiego.com/compound-components-typescript/" target="_blank" rel="noopener noreferrer">Compound React Components with Hooks + TypeScript | Martin’s Blog (martindidiego.com)</a></p></li><li><p><a href="https://mparavano.medium.com/find-filter-react-children-by-type-html-elements-11a0e7bd08bf" target="_blank" rel="noopener noreferrer">Find and Filter React Children By Type (HTML Elements) | by Michael Paravano | Medium</a></p></li></ul>]]></content>
        <author>
            <name>Mu Jing Tsai</name>
            <uri>https://github.com/moojing</uri>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="javascript" term="javascript"/>
    </entry>
</feed>